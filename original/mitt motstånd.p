PROGRAM parser;	CONST		fieldlength = 12;	VAR		r, t, l, u, x, y, p : real;		res : ARRAY[0..fieldlength] OF real;		vilkenSerie : integer;	PROCEDURE utskrift (resA, magA, resB, magB : real;									typ : char);		VAR			k, k1, a : char;			t1, r1, r2 : real;	BEGIN		a := '/';		a := typ;		t1 := ((100 * p / r) - 100) * 1000;		t1 := round(t1) / 1000;		r1 := resA * magA;		k := ' ';		k1 := ' ';		IF magA > 100 THEN			BEGIN				r1 := r1 / 1000;				k := 'k';			END;		IF magA > 1E5 THEN			BEGIN				r1 := r1 / 1000;				k := 'M';			END;		r2 := resB * magB;		IF magB > 100 THEN			BEGIN				r2 := r2 / 1000;				k1 := 'k';			END;		IF magB > 1e5 THEN			BEGIN				r2 := r2 / 1000;				k1 := 'M';			END;		writeln(r1 : 7 : 2, k : 1, ' ' : 1, a : 2, r2 : 5 : 2, k1 : 2, ' =', p, t1, '%' : 1);	END;   		 	 {utskrift}	PROCEDURE init;		CONST			left = 410;			right = 485;			char_height = 12;		VAR			top, bottom, varv : integer;			r : rect;		PROCEDURE create_drawrect;			CONST				left = 310;				top = 40;				right = 505;				bottom = 270;			VAR				r : rect;		BEGIN			setrect(r, left, top, right, bottom);			setdrawingrect(r);			showdrawing;		END;		PROCEDURE create_textrect;			CONST				left = 5;				top = 40;				right = 300;				bottom = 340;			VAR				r : rect;		BEGIN			setRect(r, left, top, right, bottom);			SetTextRect(r);			ShowText;		END;	BEGIN		create_textrect;		create_drawrect;		textsize(char_height);		top := 10;		bottom := 10;		SetRect(r, left, top, right, bottom);		x := 1;		y := 1;		res[1] := 1;		res[2] := 1.2;		res[3] := 1.5;		res[4] := 1.8;		res[5] := 2.2;		res[6] := 2.7;		res[7] := 3.3;		res[8] := 3.9;		res[9] := 4.7;		res[10] := 5.6;		res[11] := 6.8;		res[12] := 8.2;	END;	PROCEDURE parallell;		VAR			z, w, m, n : integer;	BEGIN		x := 1;		y := 1;		m := 1;		n := 1;		writeln('Parallella', l, u);		FOR z := 1 TO 7 DO						{7 dekader }			BEGIN				m := 1;				WHILE ((res[m] * x < 2 * u) OR (res[m] * x > r)) AND (m < fieldlength) DO					BEGIN						FOR w := 1 TO 7 DO			{7 dekader }							BEGIN								WHILE ((res[n] * y > r) AND (n < fieldlength)) DO									BEGIN										p := (res[m] * x * res[n] * y) / ((res[m] * x) + (res[n] * y));										IF (p > l) AND (p < u) THEN											BEGIN												utskrift(res[m], x, res[n], y, '/');											END;										n := n + 1;									END;  					{n}								n := 1;								y := y * 10;							END;  						 {w}						y := 1;						m := m + 1;					END;							{m}				x := x * 10;			END;								{z}	END;	PROCEDURE serie;		VAR			z, w, m, n : integer;	BEGIN		x := 1;		y := 1;		m := 1;		n := 1;		writeln('Seriella motstŒnd:', l, u);		n := fieldlength;		FOR z := 7 DOWNTO 1 DO				{7 dekader }			BEGIN				m := fieldlength;				WHILE ((res[m] * x < l / 2) OR (res[m] * x > r)) AND (m > 0) DO					BEGIN						FOR w := 7 DOWNTO 1 DO			{7 dekader }							BEGIN								WHILE ((res[n] * y < r) AND (n > 0)) DO									BEGIN										p := res[m] * x + res[n] * y;										IF (p > l) AND (p < u) THEN											BEGIN												utskrift(res[m], x, res[n], y, '+');											END;										n := n - 1;									END;  					{n}								n := 1;								y := y * 10;							END;  						 {w}						y := 1;						m := m - 1;					END;							{m}				x := x * 10;			END;								{z}	END;	PROCEDURE mitt_serie;		VAR			dekA, dekB, indexA, indexB : integer;			multiplikatorA, multiplikatorB : real;			a, b : extended;	BEGIN		vilkenSerie := 12;		multiplikatorA := 1;		multiplikatorB := 1;		writeln('test serie', l, u);		multiplikatorA := 1;		WHILE (multiplikatorA <= 1e7) AND (multiplikatorA <= l) DO{     }			BEGIN									{7 dekader }				multiplikatorB := 1;				WHILE (multiplikatorB <= 1e7) AND (multiplikatorB <= l) DO					BEGIN 								{7 dekader }						FOR indexA := 1 TO 12 DO							FOR indexB := 1 TO 12 DO								BEGIN									p := (res[indexA] * multiplikatorA) + (res[indexB] * multiplikatorB);									IF (p > l) AND (p < u) THEN										BEGIN											utskrift(res[indexA], multiplikatorA, res[indexB], multiplikatorB, '+');										END;								END;						multiplikatorB := 10 * multiplikatorB;					END;				multiplikatorA := 10 * multiplikatorA;			END;  				{  }	END;	PROCEDURE readTheValue;	BEGIN		REPEAT			write('MotstŒndsvŠrde');			read(r);			writeln;		UNTIL (r > 0.5) AND (r < 16400000);		write('Tolerans');		read(t);		writeln;		l := r - (t / 100) * r;		u := r + (t / 100) * r;	END;BEGIN                  {huvudprogrammet}	init;	readTheValue;	parallell;{serie;}	mitt_serie;	sysbeep(3);END.				{slut pŒ huvudprogram}